# -*- coding: utf-8 -*-
"""Untitled22.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1c5_6q1X-dMdtFvIyPn5gQhWVF67hqQYq
"""

!pip install gradio requests beautifulsoup4 transformers torch gtts textblob

import gradio as gr
import requests
from bs4 import BeautifulSoup
from transformers import pipeline
from gtts import gTTS
import os
from textblob import TextBlob

# ‚úÖ News Fetching
def fetch_news(company):
    api_key = "034cc0fac4ce41b5b9296bf36f44dc15"
    url = f"https://newsapi.org/v2/everything?q={company}&language=hi&apiKey={api_key}"
    response = requests.get(url)

    if response.status_code != 200:
        return "‚ùå Failed to fetch news.", None

    data = response.json()
    articles = data.get("articles", [])

    if not articles:
        return "‚ùå No news articles found.", None

    news_content = []
    for article in articles[:2]:
        news_content.append({"title": article["title"], "content": article["description"]})

    return news_content, None

# ‚úÖ Summarization
summarizer = pipeline("summarization", model="sshleifer/distilbart-cnn-12-6")

def summarize_text(text):
    if len(text) < 50:
        return "üìú News content too short for summarization."
    text = text[:1024]  # ‚úÖ Fix: Prevent IndexError
    summary = summarizer(text, max_length=100, min_length=30, do_sample=False)
    return summary[0]['summary_text']

# ‚úÖ Sentiment Analysis
def analyze_sentiment(text):
    analysis = TextBlob(text)
    if analysis.sentiment.polarity > 0:
        return "Positive üòä"
    elif analysis.sentiment.polarity < 0:
        return "Negative üòû"
    else:
        return "Neutral üòê"

# ‚úÖ Hindi TTS
def text_to_speech(text):
    tts = gTTS(text=text, lang="hi")
    filename = "output.mp3"
    tts.save(filename)
    return filename

# ‚úÖ Full Processing Function
def process_company_news(company):
    news_data, _ = fetch_news(company)

    if "‚ùå" in news_data:
        return news_data, None

    processed_articles = []
    for article in news_data:
        summary = summarize_text(article["content"])
        sentiment = analyze_sentiment(summary)

        processed_articles.append({
            "Title": article["title"],
            "Summary": summary,
            "Sentiment": sentiment
        })

    final_text = f"{company} ‡§ï‡•Ä ‡§π‡§æ‡§≤ ‡§ï‡•Ä ‡§ñ‡§¨‡§∞‡•á‡§Ç: "
    for article in processed_articles:
        final_text += f"{article['Title']} - {article['Summary']} ({article['Sentiment']})\n"

    audio_file = text_to_speech(final_text)

    return processed_articles, audio_file

# ‚úÖ Gradio Interface
iface = gr.Interface(
    fn=process_company_news,
    inputs="text",
    outputs=["json", "audio"],
    title="Hindi News Summarizer & Sentiment Analysis",
    description="Enter a company name to fetch recent news, summarize, analyze sentiment, extract topics, and generate a Hindi TTS report."
)

iface.launch()

